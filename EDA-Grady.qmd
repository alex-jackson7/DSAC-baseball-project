```{r}
library(baseballr)
library(tidyverse)
library(tidymodels)

astros_2022 <- team_results_bref(Tm = "Houston Astros", year = 2022) #this data doesn't include the postseason 

#https://www.fangraphs.com/teams/astros/stats - I was thinking that we could try to scrape
#the data from here which is the starting pitcher stats for the Astros and then create plots
#using these statistics plotted against results for each pitcher to determine which stats seem
#to be better predictors of winning. I wasn't able to scrape in the data but I do think that it 
#can be done. 

#| label: number-of-wins-by-pitcher
astros_2022 |>
  filter(Result == c("W", "W-wo")) |>
  select(Win) |>
  group_by(Win) |>
  count(Win) |>
  arrange(desc(n))
  

#| label: number-of-losses-by-pitcher
astros_2022 |>
  filter(Result == c("L", "L-wo")) |>
  select(Loss) |>
  group_by(Loss) |>
  count(Loss) |>
  arrange(desc(n))
 

#| label: creating-list-of-pitchers
astros_pitchers_wins <-
  tibble(
    pitcher = c("Abreu", "Brown", "Garcia", "Javier", "McCullers", "Montero", "Neris",
                "Odorizzi", "Pressly", "Stanek", "Urquidy", "Valdez", "Verlander")
  )


```

```
```{r}
#scraping data for pitcher time logs

astros_pitchers <-
  daily_pitcher_bref("2022-04-07", "2022-10-05") |>
  filter(Team == "Houston")
```

From the plots above which count the number of wins and losses per pitcher, I selected the top 4 pitchers based on their number of wins and the bottom 3 based on their number of losses.
```{r}
#| label: creating-a-starter-dataset
astros_starters <-
astros_pitchers |>
filter(GS != 0)

astros_relievers <-
astros_pitchers |>
filter(GS == 0)

#| label: most losses as a starter vs most wins as a starter

astros_starters |>
select(Name, W) |>
arrange(desc(W))

astros_relievers |>
select(Name, W) |>
arrange(desc(W))
```
Pulling out the pitchers with the most wins, we see that Justin Verlander has the most wins for starters and Hector Neris has the most wins for relievers. 

Let's compare some of their stats to those of the other pitchers.
```{r}
#this is creating smaller plots to just look at trends for astros' starters
#we can obviously create more looking at relievers and different relationships
ggplot(astros_starters,
  aes(x = ERA, y = Str, color = W)) +
  geom_point() 
  
ggplot(astros_starters,
  aes(x = W, y = StL, color = Name)) +
  geom_point() 
  
ggplot(astros_starters,
  aes(x = W, y = SO_perc, color = Name)) +
  geom_point() 
  

  


```
```{r}
#I think it is better to use the entire dataset so we can gather whether different statistics are better predictors

pitchers_2022 <-
fg_pitch_leaders(x=2022, y=2022)

#mutate a column for the winning percentage based on games played
pitchers_2022 <-
pitchers_2022 |>
mutate(winning_perc = W/G) |>
mutate(K = Strikes/Pitches)

#calculating mean ERA
mean_ERA <-
pitchers_2022 |>
select(ERA) |>
summarize(mean = mean(ERA))

#plotting ERA vs win percentage
ggplot(pitchers_2022,
aes(x = winning_perc, y = ERA)) + 
geom_point() +
geom_hline(yintercept = 3.34, color = "red") +
geom_vline(xintercept = 0.5, color = "blue")
```
From the plot above we can then zero in on the points that lie in the bottom right quadrant
because these pitches are performing above average in regards to ERA and win_percentage.
To see those who are underperforming we can look at the top left quadrant. 

```{r}
above_era_winpc <-
pitchers_2022 |>
filter(winning_perc > 0.5 & ERA < 3.34)

below_era_winpc <-
pitchers_2022 |>
filter(winning_perc <= 0.5 & ERA >= 3.34)
```
After these datasets have been created, we can now look more closely into other statistics that impact 
winning_percentage and ERA. 
```{r}
above_mean_SO <-
above_era_winpc |>
summarize(mean_SO = mean(SO))

below_mean_SO <-
below_era_winpc |>
summarize(mean_SO = mean(SO))
```
From here we can look at other means and correlations that might be statistically significant.
```{r}
#creating a line of best fit for the winning_perc vs ERA graph
ggplot(pitchers_2022,
aes(x = winning_perc, y = ERA)) + 
geom_point() +
geom_hline(yintercept = 3.34, color = "red") +
geom_vline(xintercept = 0.5, color = "blue") + 
geom_smooth(method = lm, se = FALSE)

#loading in tidy models
library(tidymodels)

#looking at the R-squared of the linear model
win_ERA_model <-
linear_reg() |>
set_engine("lm") |>
fit(winning_perc ~ ERA, data = pitchers_2022)

tidy(win_ERA_model)

glance(win_ERA_model)$r.squared
```
Since the r squared value is not very large, it doesn't seem as though ERA is a great predictor of winning_percentage.
We can look at other statistics such as WHIP. 
```{r}
#creating a line of best fit for the winning_perc vs WHIP graph
ggplot(pitchers_2022,
aes(y = winning_perc, x = WHIP)) + 
geom_point() +
geom_smooth(method = lm, se = FALSE)

#looking at the R-squared of the linear model
win_WHIP_model <-
linear_reg() |>
set_engine("lm") |>
fit(winning_perc ~ WHIP, data = pitchers_2022)

tidy(win_WHIP_model)

glance(win_WHIP_model)$r.squared
```
Looking at this model it appears as though WHIP is an even poorer measure of winning_percentage.
I am going to look at the relation between WHIP and ERA just for fun. 
```{r}
#creating a line of best fit for the ERA vs WHIP graph
ggplot(pitchers_2022,
aes(y = ERA, x = WHIP)) + 
geom_point() +
geom_smooth(method = lm, se = FALSE)

#looking at the R-squared of the linear model
ERA_WHIP_model <-
linear_reg() |>
set_engine("lm") |>
fit(ERA ~ WHIP, data = pitchers_2022)

tidy(ERA_WHIP_model)

glance(ERA_WHIP_model)$r.squared
```
It is interesting because the R squared value is much large for this. And the line seems to fit the data better. 



```



```


